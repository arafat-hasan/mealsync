basePath: /api
definitions:
  api.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  api.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  api.LoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/api.UserResponse'
    type: object
  api.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  api.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  api.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  api.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        $ref: '#/definitions/model.UserRole'
    type: object
  model.EventAddress:
    properties:
      address:
        type: string
      created_at:
        type: string
      created_by:
        type: integer
      created_by_user:
        $ref: '#/definitions/model.User'
      deleted_at:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      updated_at:
        type: string
      updated_by:
        type: integer
      updated_by_user:
        $ref: '#/definitions/model.User'
    type: object
  model.MealComment:
    properties:
      comment:
        type: string
      created_at:
        type: string
      created_by:
        type: integer
      created_by_user:
        $ref: '#/definitions/model.User'
      deleted_at:
        type: string
      event_menu_set:
        $ref: '#/definitions/model.MealEventMenuSet'
      event_menu_set_id:
        type: integer
      id:
        type: integer
      meal_event:
        $ref: '#/definitions/model.MealEvent'
      meal_event_id:
        type: integer
      menu_item:
        $ref: '#/definitions/model.MenuItem'
      menu_item_id:
        type: integer
      rating:
        type: integer
      updated_at:
        type: string
      updated_by:
        type: integer
      updated_by_user:
        $ref: '#/definitions/model.User'
      user:
        $ref: '#/definitions/model.User'
      user_id:
        type: integer
    type: object
  model.MealEvent:
    properties:
      addresses:
        items:
          $ref: '#/definitions/model.MealEventAddress'
        type: array
      confirmed_at:
        type: string
      created_at:
        type: string
      created_by:
        type: integer
      created_by_user:
        $ref: '#/definitions/model.User'
      cutoff_time:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      event_date:
        type: string
      event_duration:
        description: in minutes
        type: integer
      id:
        type: integer
      is_active:
        type: boolean
      meal_comments:
        items:
          $ref: '#/definitions/model.MealComment'
        type: array
      meal_requests:
        items:
          $ref: '#/definitions/model.MealRequest'
        type: array
      menu_sets:
        items:
          $ref: '#/definitions/model.MealEventMenuSet'
        type: array
      name:
        type: string
      updated_at:
        type: string
      updated_by:
        type: integer
      updated_by_user:
        $ref: '#/definitions/model.User'
    type: object
  model.MealEventAddress:
    properties:
      address:
        $ref: '#/definitions/model.EventAddress'
      address_id:
        type: integer
      created_at:
        type: string
      created_by:
        type: integer
      created_by_user:
        $ref: '#/definitions/model.User'
      deleted_at:
        type: string
      id:
        type: integer
      meal_event:
        $ref: '#/definitions/model.MealEvent'
      meal_event_id:
        type: integer
      updated_at:
        type: string
      updated_by:
        type: integer
      updated_by_user:
        $ref: '#/definitions/model.User'
    type: object
  model.MealEventMenuSet:
    properties:
      created_at:
        type: string
      created_by:
        type: integer
      created_by_user:
        $ref: '#/definitions/model.User'
      deleted_at:
        type: string
      id:
        type: integer
      label:
        type: string
      meal_event:
        $ref: '#/definitions/model.MealEvent'
      meal_event_id:
        type: integer
      menu_set:
        $ref: '#/definitions/model.MenuSet'
      menu_set_id:
        type: integer
      note:
        type: string
      updated_at:
        type: string
      updated_by:
        type: integer
      updated_by_user:
        $ref: '#/definitions/model.User'
    type: object
  model.MealRequest:
    properties:
      confirmed_at:
        type: string
      created_at:
        type: string
      created_by:
        type: integer
      created_by_user:
        $ref: '#/definitions/model.User'
      deleted_at:
        type: string
      event_address:
        $ref: '#/definitions/model.MealEventAddress'
      event_menu_set:
        $ref: '#/definitions/model.MealEventMenuSet'
      event_menu_set_id:
        type: integer
      id:
        type: integer
      meal_event:
        $ref: '#/definitions/model.MealEvent'
      meal_event_address_id:
        type: integer
      meal_event_id:
        type: integer
      request_items:
        items:
          $ref: '#/definitions/model.MealRequestItem'
        type: array
      updated_at:
        type: string
      updated_by:
        type: integer
      updated_by_user:
        $ref: '#/definitions/model.User'
      user:
        $ref: '#/definitions/model.User'
      user_id:
        type: integer
    type: object
  model.MealRequestItem:
    properties:
      created_at:
        type: string
      created_by:
        type: integer
      created_by_user:
        $ref: '#/definitions/model.User'
      deleted_at:
        type: string
      id:
        type: integer
      is_selected:
        type: boolean
      meal_request:
        $ref: '#/definitions/model.MealRequest'
      meal_request_id:
        type: integer
      menu_item:
        $ref: '#/definitions/model.MenuItem'
      menu_item_id:
        type: integer
      menu_set:
        $ref: '#/definitions/model.MenuSet'
      menu_set_id:
        type: integer
      notes:
        type: string
      quantity:
        type: integer
      updated_at:
        type: string
      updated_by:
        type: integer
      updated_by_user:
        $ref: '#/definitions/model.User'
    type: object
  model.MenuItem:
    properties:
      created_at:
        type: string
      created_by:
        type: integer
      created_by_user:
        $ref: '#/definitions/model.User'
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: integer
      image_url:
        type: string
      is_active:
        type: boolean
      meal_comments:
        items:
          $ref: '#/definitions/model.MealComment'
        type: array
      meal_request_items:
        items:
          $ref: '#/definitions/model.MealRequestItem'
        type: array
      menu_set_items:
        items:
          $ref: '#/definitions/model.MenuSetItem'
        type: array
      name:
        type: string
      updated_at:
        type: string
      updated_by:
        type: integer
      updated_by_user:
        $ref: '#/definitions/model.User'
    type: object
  model.MenuSet:
    properties:
      created_at:
        type: string
      created_by:
        type: integer
      created_by_user:
        $ref: '#/definitions/model.User'
      deleted_at:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      meal_event_menu_sets:
        items:
          $ref: '#/definitions/model.MealEventMenuSet'
        type: array
      menu_set_description:
        type: string
      menu_set_items:
        items:
          $ref: '#/definitions/model.MenuSetItem'
        type: array
      menu_set_name:
        type: string
      updated_at:
        type: string
      updated_by:
        type: integer
      updated_by_user:
        $ref: '#/definitions/model.User'
    type: object
  model.MenuSetItem:
    properties:
      created_at:
        type: string
      created_by:
        type: integer
      created_by_user:
        $ref: '#/definitions/model.User'
      deleted_at:
        type: string
      id:
        type: integer
      menu_item:
        $ref: '#/definitions/model.MenuItem'
      menu_item_id:
        type: integer
      menu_set:
        $ref: '#/definitions/model.MenuSet'
      menu_set_id:
        type: integer
      updated_at:
        type: string
      updated_by:
        type: integer
      updated_by_user:
        $ref: '#/definitions/model.User'
    type: object
  model.Notification:
    description: Notification entity containing user notifications and their details
    properties:
      created_at:
        type: string
      created_by:
        example: 1
        type: integer
      deleted_at:
        type: string
      id:
        type: integer
      payload:
        example: '{"message":"Your meal request has been confirmed"}'
        type: string
      read:
        example: false
        type: boolean
      type:
        allOf:
        - $ref: '#/definitions/model.NotificationType'
        enum:
        - reminder
        - confirmation
        - admin-message
        example: reminder
      updated_at:
        type: string
      updated_by:
        example: 1
        type: integer
      user_id:
        example: 1
        type: integer
    type: object
  model.NotificationType:
    description: Type of notification (reminder, confirmation, or admin message)
    enum:
    - reminder
    - confirmation
    - admin-message
    type: string
    x-enum-varnames:
    - NotificationTypeReminder
    - NotificationTypeConfirmation
    - NotificationTypeAdminMessage
  model.User:
    properties:
      created_at:
        type: string
      created_by:
        type: integer
      created_by_user:
        $ref: '#/definitions/model.User'
      created_meal_events:
        items:
          $ref: '#/definitions/model.MealEvent'
        type: array
      deleted_at:
        type: string
      department:
        type: string
      email:
        type: string
      employee_id:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      last_login_at:
        type: string
      meal_comments:
        items:
          $ref: '#/definitions/model.MealComment'
        type: array
      meal_requests:
        items:
          $ref: '#/definitions/model.MealRequest'
        type: array
      name:
        type: string
      notification_enabled:
        type: boolean
      notifications:
        items:
          $ref: '#/definitions/model.Notification'
        type: array
      role:
        $ref: '#/definitions/model.UserRole'
      updated_at:
        type: string
      updated_by:
        type: integer
      updated_by_user:
        $ref: '#/definitions/model.User'
      updated_meal_events:
        items:
          $ref: '#/definitions/model.MealEvent'
        type: array
      username:
        type: string
    type: object
  model.UserRole:
    enum:
    - admin
    - employee
    - manager
    type: string
    x-enum-varnames:
    - UserRoleAdmin
    - UserRoleEmployee
    - UserRoleManager
  service.TokenPair:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A meal management system API for employees
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: MealSync API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT tokens
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Login user
      tags:
      - auth
  /meal-requests:
    get:
      consumes:
      - application/json
      description: Get all meal requests for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MealRequest'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List meal requests
      tags:
      - meal-requests
    post:
      consumes:
      - application/json
      description: Create a new meal request
      parameters:
      - description: Meal Request Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.MealRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.MealRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create meal request
      tags:
      - meal-requests
  /meal-requests/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing meal request
      parameters:
      - description: Meal Request ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete meal request
      tags:
      - meal-requests
    get:
      consumes:
      - application/json
      description: Get a specific meal request by its ID
      parameters:
      - description: Meal Request ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MealRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get meal request by ID
      tags:
      - meal-requests
    put:
      consumes:
      - application/json
      description: Update an existing meal request
      parameters:
      - description: Meal Request ID
        in: path
        name: id
        required: true
        type: integer
      - description: Meal Request Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.MealRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MealRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update meal request
      tags:
      - meal-requests
  /meal-requests/{id}/items:
    get:
      consumes:
      - application/json
      description: Get all items in a specific meal request
      parameters:
      - description: Meal Request ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MealRequestItem'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List meal request items
      tags:
      - meal-requests
    post:
      consumes:
      - application/json
      description: Add a new item to an existing meal request
      parameters:
      - description: Meal Request ID
        in: path
        name: id
        required: true
        type: integer
      - description: Meal Request Item Data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/model.MealRequestItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MealRequestItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add item to meal request
      tags:
      - meal-requests
  /meal-requests/{id}/items/{item_id}:
    delete:
      consumes:
      - application/json
      description: Remove an item from an existing meal request
      parameters:
      - description: Meal Request ID
        in: path
        name: id
        required: true
        type: integer
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Remove item from meal request
      tags:
      - meal-requests
  /meal-requests/{id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of a specific meal request
      parameters:
      - description: Meal Request ID
        in: path
        name: id
        required: true
        type: integer
      - description: New Status
        in: body
        name: status
        required: true
        schema:
          enum:
          - pending
          - accepted
          - rejected
          - completed
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MealRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update meal request status
      tags:
      - meal-requests
  /meals:
    get:
      consumes:
      - application/json
      description: Get all meal events for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MealEvent'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List meal events
      tags:
      - meals
    post:
      consumes:
      - application/json
      description: Create a new meal event
      parameters:
      - description: Meal Event Data
        in: body
        name: meal
        required: true
        schema:
          $ref: '#/definitions/model.MealEvent'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.MealEvent'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create meal event
      tags:
      - meals
  /meals/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing meal event
      parameters:
      - description: Meal Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete meal event
      tags:
      - meals
    get:
      consumes:
      - application/json
      description: Get a specific meal event by its ID
      parameters:
      - description: Meal Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MealEvent'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get meal event by ID
      tags:
      - meals
    put:
      consumes:
      - application/json
      description: Update an existing meal event
      parameters:
      - description: Meal Event ID
        in: path
        name: id
        required: true
        type: integer
      - description: Meal Event Data
        in: body
        name: meal
        required: true
        schema:
          $ref: '#/definitions/model.MealEvent'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MealEvent'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update meal event
      tags:
      - meals
  /meals/{meal_event_id}/comments:
    get:
      consumes:
      - application/json
      description: Get all comments for a specific meal event
      parameters:
      - description: Meal Event ID
        in: path
        name: meal_event_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MealComment'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List meal comments
      tags:
      - meal-comments
    post:
      consumes:
      - application/json
      description: Create a new comment for a meal event
      parameters:
      - description: Meal Event ID
        in: path
        name: meal_event_id
        required: true
        type: integer
      - description: Comment Data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/model.MealComment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.MealComment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create comment
      tags:
      - meal-comments
  /meals/{meal_event_id}/comments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing comment
      parameters:
      - description: Meal Event ID
        in: path
        name: meal_event_id
        required: true
        type: integer
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete comment
      tags:
      - meal-comments
    get:
      consumes:
      - application/json
      description: Get a specific comment by its ID
      parameters:
      - description: Meal Event ID
        in: path
        name: meal_event_id
        required: true
        type: integer
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MealComment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get comment by ID
      tags:
      - meal-comments
    put:
      consumes:
      - application/json
      description: Update an existing comment
      parameters:
      - description: Meal Event ID
        in: path
        name: meal_event_id
        required: true
        type: integer
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comment Data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/model.MealComment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MealComment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update comment
      tags:
      - meal-comments
  /meals/{meal_event_id}/comments/{id}/replies:
    get:
      consumes:
      - application/json
      description: Get all replies to a specific comment
      parameters:
      - description: Meal Event ID
        in: path
        name: meal_event_id
        required: true
        type: integer
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MealComment'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List comment replies
      tags:
      - meal-comments
  /menu-items:
    get:
      consumes:
      - application/json
      description: Get all menu items for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MenuItem'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List menu items
      tags:
      - menu-items
    post:
      consumes:
      - application/json
      description: Create a new menu item
      parameters:
      - description: Menu Item Data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/model.MenuItem'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.MenuItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create menu item
      tags:
      - menu-items
  /menu-items/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing menu item
      parameters:
      - description: Menu Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete menu item
      tags:
      - menu-items
    get:
      consumes:
      - application/json
      description: Get a specific menu item by its ID
      parameters:
      - description: Menu Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MenuItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get menu item by ID
      tags:
      - menu-items
    put:
      consumes:
      - application/json
      description: Update an existing menu item
      parameters:
      - description: Menu Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Menu Item Data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/model.MenuItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MenuItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update menu item
      tags:
      - menu-items
  /menu-items/category/{category}:
    get:
      consumes:
      - application/json
      description: Retrieves all menu items belonging to a specific category
      parameters:
      - description: Category name
        in: path
        name: category
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MenuItem'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get menu items by category
      tags:
      - menu-items
  /menu-items/menu-set/{menu_set_id}:
    get:
      consumes:
      - application/json
      description: Retrieves all menu items belonging to a specific menu set
      parameters:
      - description: Menu Set ID
        in: path
        name: menu_set_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MenuItem'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get menu items by menu set
      tags:
      - menu-items
  /menu-sets:
    get:
      consumes:
      - application/json
      description: Get all menu sets for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MenuSet'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List menu sets
      tags:
      - menu-sets
    post:
      consumes:
      - application/json
      description: Create a new menu set
      parameters:
      - description: Menu Set Data
        in: body
        name: menuSet
        required: true
        schema:
          $ref: '#/definitions/model.MenuSet'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.MenuSet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create menu set
      tags:
      - menu-sets
  /menu-sets/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing menu set
      parameters:
      - description: Menu Set ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete menu set
      tags:
      - menu-sets
    get:
      consumes:
      - application/json
      description: Get a specific menu set by its ID
      parameters:
      - description: Menu Set ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MenuSet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get menu set by ID
      tags:
      - menu-sets
    put:
      consumes:
      - application/json
      description: Update an existing menu set
      parameters:
      - description: Menu Set ID
        in: path
        name: id
        required: true
        type: integer
      - description: Menu Set Data
        in: body
        name: menuSet
        required: true
        schema:
          $ref: '#/definitions/model.MenuSet'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MenuSet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update menu set
      tags:
      - menu-sets
  /menu-sets/{id}/items:
    get:
      consumes:
      - application/json
      description: Get all items in a specific menu set
      parameters:
      - description: Menu Set ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MenuItem'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List menu set items
      tags:
      - menu-sets
    post:
      consumes:
      - application/json
      description: Add a menu item to an existing menu set
      parameters:
      - description: Menu Set ID
        in: path
        name: id
        required: true
        type: integer
      - description: Menu Item Data
        in: body
        name: menuItem
        required: true
        schema:
          $ref: '#/definitions/model.MenuSetItem'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.MenuSetItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add menu item to set
      tags:
      - menu-sets
  /menu-sets/{id}/items/{item_id}:
    delete:
      consumes:
      - application/json
      description: Remove a menu item from an existing menu set
      parameters:
      - description: Menu Set ID
        in: path
        name: id
        required: true
        type: integer
      - description: Menu Item ID
        in: path
        name: item_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Remove menu item from set
      tags:
      - menu-sets
  /refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using a refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.TokenPair'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Refresh access token
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Register new user
      tags:
      - auth
  /users/{user_id}/comments:
    get:
      consumes:
      - application/json
      description: Get all comments made by a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MealComment'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List user comments
      tags:
      - meal-comments
security:
- BearerAuth: []
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
