basePath: /api
definitions:
  api.CreateMealRequest:
    properties:
      date:
        example: "2024-03-20"
        type: string
      description:
        example: Special lunch menu for the week
        type: string
      menu_items:
        example:
        - '[''Chicken Curry'''
        - ' ''Rice'''
        - ' ''Salad'']'
        items:
          type: string
        type: array
    required:
    - date
    - menu_items
    type: object
  api.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  api.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  api.LoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/api.UserResponse'
    type: object
  api.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  api.RegisterRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  api.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  api.UserResponse:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      role:
        $ref: '#/definitions/model.UserRole'
    type: object
  model.Meal:
    properties:
      created_at:
        type: string
      date:
        type: string
      description:
        type: string
      id:
        type: integer
      menu_items:
        items:
          type: string
        type: array
      updated_at:
        type: string
    type: object
  model.UserRole:
    enum:
    - admin
    - employee
    - manager
    type: string
    x-enum-varnames:
    - UserRoleAdmin
    - UserRoleEmployee
    - UserRoleManager
  service.TokenPair:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A meal management system API for employees
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: MealSync API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT tokens
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Login user
      tags:
      - auth
  /meals:
    get:
      description: Get a list of all meals
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Meal'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get all meals
      tags:
      - meals
    post:
      consumes:
      - application/json
      description: Create a new meal with menu items
      parameters:
      - description: Meal details
        in: body
        name: meal
        required: true
        schema:
          $ref: '#/definitions/api.CreateMealRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Meal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create a new meal
      tags:
      - meals
  /meals/{id}:
    delete:
      description: Delete a meal by its ID
      parameters:
      - description: Meal ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Delete a meal
      tags:
      - meals
    get:
      description: Get a specific meal by its ID
      parameters:
      - description: Meal ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Meal'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get meal by ID
      tags:
      - meals
    put:
      consumes:
      - application/json
      description: Update an existing meal's details
      parameters:
      - description: Meal ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated meal details
        in: body
        name: meal
        required: true
        schema:
          $ref: '#/definitions/api.CreateMealRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Meal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Update a meal
      tags:
      - meals
  /refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using a refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.TokenPair'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Refresh access token
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Register new user
      tags:
      - auth
security:
- BearerAuth: []
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
